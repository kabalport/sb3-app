plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.4'
	id 'io.spring.dependency-management' version '1.1.3'
	id 'jacoco'
	id 'org.sonarqube' version '4.0.0.2929'
	id 'com.diffplug.spotless' version '6.21.0'
}

group = 'com.kabalport'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	runtimeOnly 'com.mysql:mysql-connector-j'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	testImplementation "org.testcontainers:testcontainers:1.19.0"
	testImplementation "org.mockito:mockito-core:3.+"

	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	testImplementation "com.redis.testcontainers:testcontainers-redis-junit:1.6.4"


	implementation(platform("software.amazon.awssdk:bom:2.20.136"))
	implementation("commons-io:commons-io:2.13.0")
	implementation("software.amazon.awssdk:aws-core")
	implementation("software.amazon.awssdk:sdk-core")
	implementation("software.amazon.awssdk:sts")
	implementation("software.amazon.awssdk:s3")
	testImplementation("org.testcontainers:localstack:1.19.0")

	implementation("org.springframework.kafka:spring-kafka")
	testImplementation("org.testcontainers:kafka")
	testImplementation 'com.tngtech.archunit:archunit:1.1.0'

}

jacoco {
	toolVersion = "0.8.8"
}


tasks.named('test') {
	useJUnitPlatform()

	jacoco {}
	finalizedBy(tasks.jacocoTestReport)
}

tasks.jacocoTestReport {
	reports {
		xml.required = true
		html.required = true
		csv.required = false

		xml.destination(file("build/jacoco/jacoco.xml"))
		html.destination(file("build/jacoco/jacoco.html"))
	}

	finalizedBy(tasks.jacocoTestCoverageVerification)
}

tasks.jacocoTestCoverageVerification {
	violationRules {
		rule {
			enabled = true
			element = "CLASS"

			limit {
				counter = "LINE"
				value = "COVEREDRATIO"
				minimum = BigDecimal.valueOf(0.1)
			}

			limit {
				counter = "LINE"
				value = "TOTALCOUNT"
				maximum = BigDecimal.valueOf(300)
			}

			excludes = List.of(
					"*.test.*",
					"*.score.*",
					"*.calcaulator.*",
					"*.testData.*",
					"*.product.*",
					"com.kabalport.sb3app.Sb3appApplication",
					"com.kabalport.sb3app.KafkaConsumerApplication",
			)
		}
	}
}

sonar {
	properties {
		property("sonar.host.url", "http://localhost:9000")
		property("sonar.login", "sqp_a3af9f6d43c080e38a09cc51cd7e359a629ba386")
		property("sonar.sources", "src/main/java")
		property("sonar.tests", "src/test/java")
		property("sonar.coverage.jacoco.xmlReportPaths", "build/jacoco/jacoco.xml")
		property("sonar.sourceEncoding", "UTF-8")
		property("sonar.projectKey", "sb3app")
		property("sonar.projectName", "sb3app")
	}
}


spotless {
	java {
		googleJavaFormat()

		removeUnusedImports()
		trimTrailingWhitespace()
		indentWithSpaces()
		endWithNewline()
	}
}


tasks.register('addGitPrecommitHook', Copy) {
	from 'script/pre-commit'
	into '.git/hooks'
}